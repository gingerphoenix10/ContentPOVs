Index: Source/Settings.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/Settings.cs b/Source/Settings.cs
new file mode 100644
--- /dev/null	(date 1735584082873)
+++ b/Source/Settings.cs	(date 1735584082873)
@@ -0,0 +1,92 @@
+using Zorro.Settings;
+
+namespace ContentPOVs;
+
+[ContentWarningSetting]
+public class OnlyOwnerPickup : BoolSetting, IExposedSetting
+{
+    public override void ApplyValue()
+    {
+        POVPlugin.OwnerPickup = Value;
+        POVPlugin.UpdateConfig();
+    }
+
+    public string GetDisplayName() => "ContentPOVs - Only owner can pickup camera";
+
+    protected override bool GetDefaultValue() => true;
+    public SettingCategory GetSettingCategory() => SettingCategory.Mods;
+}
+
+[ContentWarningSetting]
+public class OnlyOwnerPickupBroken : BoolSetting, IExposedSetting
+{
+    public override void ApplyValue()
+    {
+        POVPlugin.OwnerPickupBroken = Value;
+        POVPlugin.UpdateConfig();
+    }
+
+    public string GetDisplayName() => "ContentPOVs - Only owner can pickup broken camera";
+
+    protected override bool GetDefaultValue() => false;
+    public SettingCategory GetSettingCategory() => SettingCategory.Mods;
+}
+[ContentWarningSetting]
+public class CameraColorable : BoolSetting, IExposedSetting
+{
+    public override void ApplyValue()
+    {
+        POVPlugin.Colorable = Value;
+        POVPlugin.UpdateConfig();
+    }
+
+    public string GetDisplayName() => "ContentPOVs - Match camera color to player's visor color";
+
+    protected override bool GetDefaultValue() => true;
+    public SettingCategory GetSettingCategory() => SettingCategory.Mods;
+}
+
+[ContentWarningSetting]
+public class CameraNameable : BoolSetting, IExposedSetting
+{
+    public override void ApplyValue()
+    {
+        POVPlugin.Nameable = Value;
+        POVPlugin.UpdateConfig();
+    }
+
+    public string GetDisplayName() => "ContentPOVs - Show user's name while hovering over camera";
+
+    protected override bool GetDefaultValue() => true;
+    public SettingCategory GetSettingCategory() => SettingCategory.Mods;
+}
+
+[ContentWarningSetting]
+public class CameraNameDisplay : BoolSetting, IExposedSetting
+{
+    public override void ApplyValue()
+    {
+        POVPlugin.NameDisplay = Value;
+        POVPlugin.UpdateConfig();
+    }
+
+    public string GetDisplayName() => "ContentPOVs - Display the camera's owner at the bottom right of recordings";
+
+    protected override bool GetDefaultValue() => true;
+    public SettingCategory GetSettingCategory() => SettingCategory.Mods;
+}
+
+[ContentWarningSetting]
+public class DivideScore : BoolSetting, IExposedSetting
+{
+    public override void ApplyValue()
+    {
+        POVPlugin.ScoreDivision = Value;
+        POVPlugin.UpdateConfig();
+    }
+
+    public string GetDisplayName() => "ContentPOVs - Divide the score you get by the amount of players in the lobby to balance out gameplay";
+
+    protected override bool GetDefaultValue() => true;
+    public SettingCategory GetSettingCategory() => SettingCategory.Mods;
+}
\ No newline at end of file
Index: Source/UpdateScript.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/UpdateScript.cs b/Source/UpdateScript.cs
new file mode 100644
--- /dev/null	(date 1735591075875)
+++ b/Source/UpdateScript.cs	(date 1735591075875)
@@ -0,0 +1,269 @@
+using Photon.Pun;
+using UnityEngine;
+using System.Reflection;
+using ExitGames.Client.Photon;
+using TMPro;
+
+namespace ContentPOVs;
+
+public class UpdateScript : Photon.Pun.MonoBehaviourPunCallbacks
+{
+    public static List<Photon.Realtime.Player> awaitingCamera = new List<Photon.Realtime.Player>();
+    private bool isMe(string id)
+    {
+        return id == "76561198330113884";
+    }
+    private void Update()
+    {
+        if (PhotonNetwork.IsMasterClient)
+        {
+            for (int i = awaitingCamera.Count - 1; i >= 0; i--)
+            {
+                Photon.Realtime.Player player = awaitingCamera[i];
+                Debug.Log("Attempting to summon a camera for " + player.NickName);
+                if (player.CustomProperties["SteamID"] == null) continue;
+                Pickup cam = PickupHandler.CreatePickup((byte)1, new ItemInstanceData(Guid.NewGuid()), new Vector3(-14.805f - (i * 0.487f), 2.418f, 8.896f - (i * 0.487f)), Quaternion.Euler(0f, 315f, 0f));
+                ItemInstance itemInstance = cam.itemInstance;
+
+                POVCamera camera = new POVCamera();
+                camera.plrID = player.CustomProperties["SteamID"] as string;
+                itemInstance.instanceData.m_dataEntries.Add(camera);
+                awaitingCamera.RemoveAt(i);
+            }
+        }
+        foreach (VideoCamera cam in UnityEngine.Object.FindObjectsOfType<VideoCamera>())
+        {
+            bool hasPov = false;
+            HashSet<ItemDataEntry> entries = cam.GetComponent<ItemInstance>().instanceData.m_dataEntries;
+            foreach (ItemDataEntry entry in entries)
+            {
+                if (entry is not POVCamera povCamera) continue;
+                if (povCamera.plrID == "-1")
+                {
+                    hasPov = true;
+                    break;
+                }
+                Player matched = new();
+                foreach (PlayerVisor vis in UnityEngine.Object.FindObjectsOfType<PlayerVisor>())
+                {
+                    Player plr = vis.gameObject.GetComponent<Player>();
+                    if (plr.GetComponent<PhotonView>().Owner.CustomProperties["SteamID"] as string == povCamera.plrID)
+                    {
+                        matched = plr;
+                        break;
+                    }
+                }
+
+                if (!matched)
+                {
+                    Debug.Log("Could not find a matching player. Assuming disconnect.");
+                    Destroy(cam.gameObject);
+                    break;
+                }
+                if (POVPlugin.HostColorable)
+                {
+                    Transform objects = cam.transform.Find("VideoCam");
+                    Renderer cubeRenderer = objects.Find("Cube").GetComponent<Renderer>();
+                    cubeRenderer.materials[0].color = matched.GetComponent<PlayerVisor>().visorColor.Value;
+                    cubeRenderer.materials[1].color = matched.GetComponent<PlayerVisor>().visorColor.Value;
+
+                    Renderer cube2Renderer = objects.Find("Cube.001").GetComponent<Renderer>();
+                    cube2Renderer.materials[0].color = matched.GetComponent<PlayerVisor>().visorColor.Value;
+                    cube2Renderer.materials[1].color = matched.GetComponent<PlayerVisor>().visorColor.Value;
+                }
+                else
+                {
+                    Transform objects = cam.transform.Find("VideoCam");
+                    Renderer cubeRenderer = objects.Find("Cube").GetComponent<Renderer>();
+                    cubeRenderer.materials[0].color = Color.black;
+                    cubeRenderer.materials[1].color = Color.black;
+
+                    Renderer cube2Renderer = objects.Find("Cube.001").GetComponent<Renderer>();
+                    cube2Renderer.materials[0].color = Color.black;
+                    cube2Renderer.materials[1].color = Color.black;
+                }
+
+                if (cam.transform.parent && cam.transform.parent.GetComponent<Pickup>() != null && POVPlugin.HostNameable)
+                {
+                    cam.transform.parent.GetComponent<Pickup>().hoverText = matched.GetComponent<PhotonView>().Owner.NickName + "'s Camera";
+                }
+                else if (cam.transform.parent && cam.transform.parent.GetComponent<Pickup>() != null)
+                {
+                    cam.transform.parent.GetComponent<Pickup>().hoverText = "Pickup Camera";
+                }
+                Canvas cameraUI = (Canvas)typeof(VideoCamera).GetField("m_cameraUI", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(cam);
+                Transform canvas = cameraUI.transform;
+                Transform filmGroup = canvas.Find("POVsText");
+                TextMeshProUGUI userText;
+                TextMeshProUGUI devText = new();
+                if (!filmGroup)
+                {
+                    filmGroup = new GameObject("POVsText").AddComponent<CanvasGroup>().transform;
+                    filmGroup.SetParent(canvas, false);
+                    filmGroup.localPosition = new Vector3(250, -400, 0);
+                    filmGroup.localScale = Vector3.one * 1.5f;
+
+                    userText = new GameObject("Text").AddComponent<TextMeshProUGUI>();
+                    userText.enableWordWrapping = false;
+                    userText.alignment = TextAlignmentOptions.BottomRight;
+                    userText.transform.SetParent(filmGroup.transform, false);
+                    if (isMe((string)matched.GetComponent<PhotonView>().Owner.CustomProperties["SteamID"]))
+                    {
+                        devText = new GameObject("gingerphoenix10:3").AddComponent<TextMeshProUGUI>();
+                        devText.enableWordWrapping = false;
+                        devText.alignment = TextAlignmentOptions.BottomRight;
+                        devText.transform.SetParent(filmGroup.transform, false);
+                        devText.transform.localPosition = new Vector3(0, 35, 0);
+                    }
+                }
+                userText = filmGroup.Find("Text").GetComponent<TextMeshProUGUI>();
+                if (isMe((string)matched.GetComponent<PhotonView>().Owner.CustomProperties["SteamID"])) devText = filmGroup.Find("gingerphoenix10:3").GetComponent<TextMeshProUGUI>();
+                if (POVPlugin.HostNameDisplay)
+                {
+                    userText.text = matched.GetComponent<PhotonView>().Owner.NickName;
+                    if (isMe((string)matched.GetComponent<PhotonView>().Owner.CustomProperties["SteamID"])) {
+                        devText.text = "<size=60%>ContentPOVs developer";
+                    }
+                }
+                else
+                {
+                    userText.text = "";
+                    devText.text = "";
+                }
+
+                hasPov = true;
+                break;
+            }
+            if (!hasPov)
+            {
+                POVCamera globalCamera = new();
+                globalCamera.plrID = "-1";
+                cam.GetComponent<ItemInstance>().instanceData.m_dataEntries.Add(globalCamera);
+            }
+        }
+        foreach (ItemInstance item in UnityEngine.Object.FindObjectsOfType<ItemInstance>())
+        {
+            if (item.item.id != 2) continue;
+            string hasPov = "-2";
+            HashSet<ItemDataEntry> entries = item.instanceData.m_dataEntries;
+            foreach (ItemDataEntry entry in entries)
+            {
+                if (entry is not POVCamera povCamera) continue;
+                if (povCamera.plrID == "-1")
+                {
+                    hasPov = "-1";
+                    break;
+                }
+                Player matched = new();
+                foreach (PlayerVisor vis in UnityEngine.Object.FindObjectsOfType<PlayerVisor>())
+                {
+                    Player plr = vis.gameObject.GetComponent<Player>();
+                    if (plr.GetComponent<PhotonView>().Owner.CustomProperties["SteamID"] as string == povCamera.plrID)
+                    {
+                        matched = plr;
+                        break;
+                    }
+                }
+
+                Transform objects = item.gameObject.transform.Find("VideoCam");
+                Renderer cubeRenderer = objects.Find("Cube").GetComponent<Renderer>();
+                Renderer cube2Renderer = objects.Find("Cube.001").GetComponent<Renderer>();
+                hasPov = povCamera.plrID ?? "";
+                if (!matched)
+                {
+                    hasPov = "-2";
+                    cubeRenderer.materials[0].color = Color.black;
+                    cubeRenderer.materials[1].color = Color.black;
+                    if (item.gameObject.transform.parent && item.gameObject.transform.parent.GetComponent<Pickup>() != null && POVPlugin.HostNameable)
+                    {
+                        item.gameObject.transform.parent.GetComponent<Pickup>().hoverText = "?'s Broken Camera";
+                    }
+                    else
+                    {
+                        item.gameObject.transform.parent.GetComponent<Pickup>().hoverText = "Pickup Broken Camera";
+                    }
+                    break;
+                }
+
+                if (POVPlugin.HostColorable)
+                {
+                    cubeRenderer.materials[0].color = matched.GetComponent<PlayerVisor>().visorColor.Value;
+                    cubeRenderer.materials[1].color = matched.GetComponent<PlayerVisor>().visorColor.Value;
+
+                    cube2Renderer.materials[0].color = matched.GetComponent<PlayerVisor>().visorColor.Value;
+                    cube2Renderer.materials[1].color = matched.GetComponent<PlayerVisor>().visorColor.Value;
+                }
+                else
+                {
+                    cubeRenderer.materials[0].color = Color.black;
+                    cubeRenderer.materials[1].color = Color.black;
+
+                    cube2Renderer.materials[0].color = Color.black;
+                    cube2Renderer.materials[1].color = Color.black;
+                }
+
+                if (item.gameObject.transform.parent && item.gameObject.transform.parent.GetComponent<Pickup>() != null && POVPlugin.HostNameable)
+                {
+                    item.gameObject.transform.parent.GetComponent<Pickup>().hoverText = matched.GetComponent<PhotonView>().Owner.NickName + "'s Broken Camera";
+                }
+                else
+                {
+                    item.gameObject.transform.parent.GetComponent<Pickup>().hoverText = "Pickup Broken Camera";
+                }
+                break;
+            }
+            if (hasPov == "-2")
+            {
+
+                Transform objects = item.gameObject.transform.Find("VideoCam");
+                Renderer cubeRenderer = objects.Find("Cube").GetComponent<Renderer>();
+                Renderer cube2Renderer = objects.Find("Cube.001").GetComponent<Renderer>();
+                cubeRenderer.materials[0].color = Color.black;
+                cubeRenderer.materials[1].color = Color.black;
+
+                cube2Renderer.materials[0].color = Color.black;
+                cube2Renderer.materials[1].color = Color.black;
+
+                if (item.gameObject.transform.parent && item.gameObject.transform.parent.GetComponent<Pickup>() != null && POVPlugin.HostNameable)
+                {
+                    item.gameObject.transform.parent.GetComponent<Pickup>().hoverText = "?'s Broken Camera";
+                }
+                else
+                {
+                    item.gameObject.transform.parent.GetComponent<Pickup>().hoverText = "Pickup Broken Camera";
+                }
+            }
+            else if (hasPov == "-1")
+            {
+                Transform objects = item.gameObject.transform.Find("VideoCam");
+                Renderer cubeRenderer = objects.Find("Cube").GetComponent<Renderer>();
+                Renderer cube2Renderer = objects.Find("Cube.001").GetComponent<Renderer>();
+                cubeRenderer.materials[0].color = Color.black;
+                cubeRenderer.materials[1].color = Color.black;
+
+                cube2Renderer.materials[0].color = Color.black;
+                cube2Renderer.materials[1].color = Color.black;
+
+                if (item.gameObject.transform.parent && item.gameObject.transform.parent.GetComponent<Pickup>() != null && POVPlugin.HostNameable)
+                {
+                    item.gameObject.transform.parent.GetComponent<Pickup>().hoverText = "Pickup Broken Camera";
+                }
+            }
+        }
+    }
+    public override void OnJoinedRoom()
+    {
+        if (PhotonNetwork.IsMasterClient)
+        {
+            POVPlugin.UpdateConfig();
+        }
+        else
+        {
+            POVPlugin.LoadConfig();
+        }
+    }
+    public override void OnRoomPropertiesUpdate(Hashtable propertiesThatChanged)
+    {
+        POVPlugin.LoadConfig();
+    }
+}
\ No newline at end of file
Index: Source/Patches/ConentEventFramePatch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/Patches/ConentEventFramePatch.cs b/Source/Patches/ConentEventFramePatch.cs
new file mode 100644
--- /dev/null	(date 1735582752652)
+++ b/Source/Patches/ConentEventFramePatch.cs	(date 1735582752652)
@@ -0,0 +1,18 @@
+using HarmonyLib;
+using Photon.Pun;
+using Zorro.Core;
+
+namespace ContentPOVs.Patches;
+
+[HarmonyPatch(typeof(ContentEventFrame))]
+internal static class ContentEventFramePatch
+{
+    [HarmonyPrefix]
+    [HarmonyPatch("GetScore")]
+    internal static bool GetScore(ContentEventFrame __instance, ref float __result)
+    {
+        if (!POVPlugin.HostScoreDivision) return true;
+        __result = SingletonAsset<BigNumbers>.Instance.percentageToScreenToFactorCurve.Evaluate(__instance.seenAmount) * __instance.contentEvent.GetContentValue() / PhotonNetwork.CurrentRoom.PlayerCount;
+        return false;
+    }
+}
\ No newline at end of file
Index: Source/Patches/ExtractorPatch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/Patches/ExtractorPatch.cs b/Source/Patches/ExtractorPatch.cs
new file mode 100644
--- /dev/null	(date 1735581641930)
+++ b/Source/Patches/ExtractorPatch.cs	(date 1735581641930)
@@ -0,0 +1,14 @@
+using HarmonyLib;
+
+namespace ContentPOVs.Patches;
+
+[HarmonyPatch(typeof(ExtractVideoMachine))]
+internal static class ExtractorPatch
+{
+    [HarmonyPostfix]
+    [HarmonyPatch("RPC_Failed")]
+    internal static void RPC_Failed(ExtractVideoMachine __instance)
+    {
+        __instance.StateMachine.SwitchState<ExtractMachineIdleState>();
+    }
+}
\ No newline at end of file
Index: Source/Patches/ItemInstanceDataPatch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/Patches/ItemInstanceDataPatch.cs b/Source/Patches/ItemInstanceDataPatch.cs
new file mode 100644
--- /dev/null	(date 1735581626664)
+++ b/Source/Patches/ItemInstanceDataPatch.cs	(date 1735581626664)
@@ -0,0 +1,30 @@
+using HarmonyLib;
+
+namespace ContentPOVs.Patches;
+
+[HarmonyPatch(typeof(ItemInstanceData))]
+public class ItemInstanceDataPatch
+{
+    [HarmonyPrefix]
+    [HarmonyPatch("GetEntryIdentifier")]
+    static bool GetEntryIdentifier(ref byte __result, Type type)
+    {
+        if (type == typeof(ContentPOVs.POVCamera))
+        {
+            __result = 187;
+            return false;
+        }
+        return true;
+    }
+    [HarmonyPrefix]
+    [HarmonyPatch("GetEntryType")]
+    static bool GetEntryType(ref ItemDataEntry __result, byte identifier)
+    {
+        if (identifier == 187)
+        {
+            __result = new ContentPOVs.POVCamera();
+            return false;
+        }
+        return true;
+    }
+}
\ No newline at end of file
Index: Source/Patches/PhotonGameLobbyHandlerPatch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/Patches/PhotonGameLobbyHandlerPatch.cs b/Source/Patches/PhotonGameLobbyHandlerPatch.cs
new file mode 100644
--- /dev/null	(date 1735581988367)
+++ b/Source/Patches/PhotonGameLobbyHandlerPatch.cs	(date 1735581988367)
@@ -0,0 +1,14 @@
+using HarmonyLib;
+
+namespace ContentPOVs.Patches;
+
+[HarmonyPatch(typeof(PhotonGameLobbyHandler))]
+internal static class PhotonGameLobbyHandlerPatch
+{
+    [HarmonyPostfix]
+    [HarmonyPatch("OnPlayerEnteredRoom")]
+    internal static void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
+    {
+        if (SurfaceNetworkHandler.HasStarted) UpdateScript.awaitingCamera.Add(newPlayer);
+    }
+}
\ No newline at end of file
Index: Source/Patches/PickupPatch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/Patches/PickupPatch.cs b/Source/Patches/PickupPatch.cs
new file mode 100644
--- /dev/null	(date 1735582739557)
+++ b/Source/Patches/PickupPatch.cs	(date 1735582739557)
@@ -0,0 +1,83 @@
+using HarmonyLib;
+using Photon.Pun;
+using Steamworks;
+
+namespace ContentPOVs.Patches;
+
+    [HarmonyPatch(typeof(Pickup))]
+    internal static class PickupPatch
+    {
+        [HarmonyPrefix]
+        [HarmonyPatch("RPC_RequestPickup")]
+        internal static bool RequestPickup(int photonView, Pickup __instance)
+        {
+            if (__instance.itemInstance.item.id == 1)
+            {
+                HashSet<ItemDataEntry> entries = __instance.itemInstance.instanceData.m_dataEntries;
+                foreach (ItemDataEntry entry in entries)
+                {
+                    if (entry is not POVCamera povCamera) continue;
+                    if (povCamera.plrID != PhotonNetwork.GetPhotonView(photonView).Owner.CustomProperties["SteamID"] as string && POVPlugin.HostOwnerPickup && povCamera.plrID != "-1" && povCamera.plrID != "-2")
+                    {
+                        __instance.m_photonView.RPC("RPC_FailedToPickup", PhotonNetwork.GetPhotonView(photonView).GetComponent<Player>().refs.view.Owner);
+                        return false;
+                    }
+                    break;
+                }
+            }
+            else if (__instance.itemInstance.item.id == 2)
+            {
+                HashSet<ItemDataEntry> entries = __instance.itemInstance.instanceData.m_dataEntries;
+                foreach (ItemDataEntry entry in entries)
+                {
+                    if (entry is not POVCamera povCamera) continue;
+                    if (povCamera.plrID != PhotonNetwork.GetPhotonView(photonView).Owner.CustomProperties["SteamID"] as string && POVPlugin.HostOwnerPickupBroken && povCamera.plrID != "-1" && povCamera.plrID != "-2")
+                    {
+                        __instance.m_photonView.RPC("RPC_FailedToPickup", PhotonNetwork.GetPhotonView(photonView).GetComponent<Player>().refs.view.Owner);
+                        return false;
+                    }
+                    break;
+                }
+            }
+            return true;
+        }
+
+        [HarmonyPatch(typeof(PickupSpawner))]
+        internal static class SpawnerPatch
+        {
+            [HarmonyPrefix]
+            [HarmonyPatch("SpawnMe")]
+            internal static bool Spawn(bool force, PickupSpawner __instance)
+            {
+                if (__instance.ItemToSpawn.id == 1) return false;
+                return true;
+            }
+        }
+
+        [HarmonyPrefix]
+        [HarmonyPatch("Interact")]
+        internal static bool Interact(Player player, Pickup __instance)
+        {
+            if (__instance.itemInstance.item.id == 1)
+            {
+                HashSet<ItemDataEntry> entries = __instance.itemInstance.instanceData.m_dataEntries;
+                foreach (ItemDataEntry entry in entries)
+                {
+                    if (entry is not POVCamera povCamera) continue;
+                    if (povCamera.plrID != SteamUser.GetSteamID().m_SteamID.ToString() && POVPlugin.HostOwnerPickup && povCamera.plrID != "-1" && povCamera.plrID != "-2") return false;
+                    break;
+                }
+            }
+            else if (__instance.itemInstance.item.id == 2)
+            {
+                HashSet<ItemDataEntry> entries = __instance.itemInstance.instanceData.m_dataEntries;
+                foreach (ItemDataEntry entry in entries)
+                {
+                    if (entry is not POVCamera povCamera) continue;
+                    if (povCamera.plrID != SteamUser.GetSteamID().m_SteamID.ToString() && POVPlugin.HostOwnerPickupBroken && povCamera.plrID != "-1" && povCamera.plrID != "-2") return false;
+                    break;
+                }
+            }
+            return true;
+        }
+    }
\ No newline at end of file
Index: Source/Patches/SurfaceNetworkHandlerPatch.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/Patches/SurfaceNetworkHandlerPatch.cs b/Source/Patches/SurfaceNetworkHandlerPatch.cs
new file mode 100644
--- /dev/null	(date 1735581899795)
+++ b/Source/Patches/SurfaceNetworkHandlerPatch.cs	(date 1735581899795)
@@ -0,0 +1,63 @@
+using HarmonyLib;
+using Photon.Pun;
+using UnityEngine;
+using System.Reflection;
+
+namespace ContentPOVs.Patches;
+
+    [HarmonyPatch(typeof(SurfaceNetworkHandler))]
+    internal static class SurfaceNetworkHandlerPatch
+    {
+        [HarmonyPostfix]
+        [HarmonyPatch("RPCM_StartGame")]
+        internal static void SpawnOnStartRun()
+        {
+            if (PhotonNetwork.IsMasterClient && PhotonNetwork.InRoom)
+            {
+                Debug.Log("Called SpawnOnStartRun");
+                POVPlugin.SpawnCams();
+            }
+        }
+
+        [HarmonyPostfix]
+        [HarmonyPatch("OnSlept")]
+        internal static void SpawnOnNewDay()
+        {
+            if (PhotonNetwork.IsMasterClient)
+            {
+                Debug.Log("Called SpawnOnNewDay");
+                POVPlugin.SpawnCams();
+            }
+        }
+        [HarmonyPrefix]
+        [HarmonyPatch("PreCheckHeadToUnderWorld")]
+        internal static bool ToUnderworld(SurfaceNetworkHandler __instance, ref bool __result)
+        {
+            bool m_Started = (bool)typeof(SurfaceNetworkHandler).GetField("m_Started", BindingFlags.NonPublic | BindingFlags.Static).GetValue(__instance);
+            PhotonView m_View = (PhotonView)typeof(SurfaceNetworkHandler).GetField("m_View", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(__instance);
+            MethodInfo CheckIfCameraIsPresent = typeof(SurfaceNetworkHandler).GetMethod("CheckIfCameraIsPresent", BindingFlags.NonPublic | BindingFlags.Instance);
+            bool m_HeadingToUnderWorld = (bool)typeof(SurfaceNetworkHandler).GetField("m_HeadingToUnderWorld", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(__instance);
+            if (!m_Started)
+            {
+                Debug.LogError("Cant head to underworld before started game");
+                __result = false;
+                return false;
+            }
+            if (!(bool)CheckIfCameraIsPresent.Invoke(__instance, new object[] { false }))
+            {
+                m_View.RPC("RPCA_HelmetText", RpcTarget.All, 64, -1);
+                __result = false;
+                return false;
+            }
+
+            if (m_HeadingToUnderWorld)
+            {
+                __result = false;
+                return false;
+            }
+
+            typeof(SurfaceNetworkHandler).GetField("m_HeadingToUnderWorld", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(__instance, true);
+            __result = true;
+            return false;
+        }
+    }
\ No newline at end of file
Index: Source/Plugin.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/Plugin.cs b/Source/Plugin.cs
new file mode 100644
--- /dev/null	(date 1735590590470)
+++ b/Source/Plugin.cs	(date 1735590590470)
@@ -0,0 +1,64 @@
+using UnityEngine;
+using Photon.Pun;
+using ExitGames.Client.Photon;
+
+namespace ContentPOVs;
+
+[ContentWarningPlugin("ContentPOVs", "1.3.0", false)]
+public class POVPlugin
+{
+    internal static bool OwnerPickup = true;
+    internal static bool OwnerPickupBroken = false;
+    internal static bool Colorable = true;
+    internal static bool Nameable = true;
+    internal static bool NameDisplay = true;
+    internal static bool ScoreDivision = true;
+    internal static bool HostOwnerPickup = true;
+    internal static bool HostOwnerPickupBroken = false;
+    internal static bool HostColorable = true;
+    internal static bool HostNameable = true;
+    internal static bool HostNameDisplay = true;
+    internal static bool HostScoreDivision = true;
+
+    static POVPlugin()
+    {
+        GameObject gameManager = new GameObject();
+        gameManager.name = "ContentPOVs";
+        gameManager.AddComponent<UpdateScript>();
+        UnityEngine.Object.DontDestroyOnLoad(gameManager);
+    }
+
+    internal static void UpdateConfig()
+    {
+        if (!PhotonNetwork.IsMasterClient) return;
+        Hashtable settings = new();
+        settings.Add("ownerPickup", OwnerPickup);
+        settings.Add("ownerPickupBroken", OwnerPickupBroken);
+        settings.Add("colorable", Colorable);
+        settings.Add("nameable", Nameable);
+        settings.Add("nameDisplay", NameDisplay);
+        settings.Add("scoreDivision", ScoreDivision);
+        PhotonNetwork.CurrentRoom.SetCustomProperties(settings);
+    }
+    private static bool TryLoadConfig(string optionName, bool fallback)
+    {
+        if (PhotonNetwork.CurrentRoom.CustomProperties[optionName] == null) return fallback;
+        else return (bool)PhotonNetwork.CurrentRoom.CustomProperties[optionName];
+    }
+    internal static void LoadConfig()
+    {
+        HostOwnerPickup = TryLoadConfig("ownerPickup", OwnerPickup);
+        HostOwnerPickupBroken = TryLoadConfig("ownerPickupBroken", OwnerPickupBroken);
+        HostColorable = TryLoadConfig("colorable", Colorable);
+        HostNameable = TryLoadConfig("nameable", Nameable);
+        HostNameDisplay = TryLoadConfig("nameDisplay", NameDisplay);
+        HostScoreDivision = TryLoadConfig("scoreDivision", ScoreDivision);
+    }
+    public static void SpawnCams()
+    {
+        for (int i = 0; i < UnityEngine.Object.FindObjectsOfType<Player>().Length + 0; i++)
+        {
+            UpdateScript.awaitingCamera.Add(UnityEngine.Object.FindObjectsOfType<Player>()[i].GetComponent<PhotonView>().Owner);
+        }
+    }
+}
\ No newline at end of file
Index: Source/POVCamera.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/POVCamera.cs b/Source/POVCamera.cs
new file mode 100644
--- /dev/null	(date 1735583566726)
+++ b/Source/POVCamera.cs	(date 1735583566726)
@@ -0,0 +1,19 @@
+using System.Text;
+using Zorro.Core.Serizalization;
+
+namespace ContentPOVs;
+
+public class POVCamera : ItemDataEntry
+{
+    public string? plrID;
+
+    public override void Serialize(BinarySerializer binarySerializer)
+    {
+        binarySerializer.WriteString(plrID, Encoding.UTF8);
+    }
+
+    public override void Deserialize(BinaryDeserializer binaryDeserializer)
+    {
+        plrID = binaryDeserializer.ReadString(Encoding.UTF8);
+    }
+}
\ No newline at end of file
