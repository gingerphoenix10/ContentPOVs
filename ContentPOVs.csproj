<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <AssemblyName>com.gingerphoenix10.povs</AssemblyName>
    <Product>ContentPOVs</Product>
    <Version>1.0.5</Version>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <LangVersion>latest</LangVersion>
    <RestoreAdditionalProjectSources>
      https://api.nuget.org/v3/index.json;
      https://nuget.bepinex.dev/v3/index.json;
      https://nuget.samboy.dev/v3/index.json
    </RestoreAdditionalProjectSources>
    <RootNamespace>ContentPOVs</RootNamespace>

    <ContentWarningPath>D:\Steam\steamapps\common\Content Warning\</ContentWarningPath>
  </PropertyGroup>

  <!-- Package References - Standard Libraries -->
  <ItemGroup>
    <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all" />
    <PackageReference Include="BepInEx.Core" Version="5.*" />
    <PackageReference Include="BepInEx.PluginInfoProps" Version="2.*" />
    <PackageReference Include="UnityEngine.Modules" Version="2022.3.10" IncludeAssets="compile" />
  </ItemGroup>

  <!-- .NET Framework References -->
  <ItemGroup Condition="'$(TargetFramework.TrimEnd(`0123456789`))' == 'net'">
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="all" />
  </ItemGroup>

  <!-- Local References using ContentWarningPath -->
  <ItemGroup>
    <Reference Include="CommanderCat101.ContentSettings">
      <HintPath>..\BepInEx\plugins\ContentSettings\CommanderCat101.ContentSettings.dll</HintPath>
    </Reference>
    <Reference Include="MyceliumNetworkingForCW">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\MyceliumNetworkingForCW.dll</HintPath>
    </Reference>
    <Reference Include="Photon3Unity3D">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\Photon3Unity3D.dll</HintPath>
    </Reference>
    <Reference Include="PhotonRealtime">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\PhotonRealtime.dll</HintPath>
    </Reference>
    <Reference Include="PhotonUnityNetworking">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\PhotonUnityNetworking.dll</HintPath>
    </Reference>
    <Reference Include="ShopUtils">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\ShopUtils.dll</HintPath>
    </Reference>
    <Reference Include="Sirenix.Serialization">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\Sirenix.Serialization.dll</HintPath>
    </Reference>
    <Reference Include="Unity.TextMeshPro">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\Unity.TextMeshPro.dll</HintPath>
    </Reference>
    <Reference Include="Zorro.Core.Runtime">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\Zorro.Core.Runtime.dll</HintPath>
    </Reference>
    <Reference Include="Zorro.Settings.Runtime">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\Zorro.Settings.Runtime.dll</HintPath>
    </Reference>
  </ItemGroup>

  <!-- CI-Specific References -->
  <ItemGroup Condition="$(CI) != 'true'">
    <Reference Include="com.rlabrecque.steamworks.net">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\com.rlabrecque.steamworks.net.dll</HintPath>
    </Reference>
    <Reference Include="Assembly-CSharp">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\Assembly-CSharp.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UI">
      <HintPath>$(ContentWarningPath)Content Warning_Data\Managed\UnityEngine.UI.dll</HintPath>
    </Reference>
  </ItemGroup>

  <ItemGroup Condition="$(CI) == 'true'">
    <PackageReference Include="ContentWarning.GameLibs.Steam" Version="*-*" PrivateAssets="all" />
  </ItemGroup>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent" Condition="$(CI) != 'true'">
    <Exec Command="@Echo Off&#xD;&#xA;SETLOCAL EnableExtensions&#xD;&#xA;set ContentWarningPath=$(ContentWarningPath)&#xD;&#xA;set EXE=Content Warning.exe&#xD;&#xA;set DIR=%25ContentWarningPath%25&#xD;&#xA;&#xD;&#xA;REM Check if the directory exists&#xD;&#xA;if Not Exist &quot;%25DIR%25&quot; (&#xD;&#xA;    echo Couldn't find Content Warning. Cannot auto-install mod.&#xD;&#xA;    exit /B&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;REM Check if process is running and kill if it is&#xD;&#xA;tasklist /FI &quot;IMAGENAME eq %25EXE%25&quot; | find /I &quot;%25EXE%25&quot; &gt; nul&#xD;&#xA;if %25ERRORLEVEL%25 EQU 0 (&#xD;&#xA;    echo %25EXE%25 is running. Terminating process.&#xD;&#xA;    taskkill /F /IM &quot;%25EXE%25&quot;&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;ping 127.0.0.1 -n 2 &gt; nul&#xD;&#xA;if exist &quot;%25DIR%25\BepInEx\Plugins\com.gingerphoenix10.POVs.dll&quot; (&#xD;&#xA;  del &quot;%25DIR%25\BepInEx\Plugins\com.gingerphoenix10.POVs.dll&quot;&#xD;&#xA;)&#xD;&#xA;ping 127.0.0.1 -n 2 &gt; nul&#xD;&#xA;copy &quot;$(TargetPath)&quot; &quot;%25DIR%25\BepInEx\Plugins&quot;&#xD;&#xA;:loop&#xD;&#xA;if exist &quot;%25DIR%25\BepInEx\Plugins\com.gingerphoenix10.POVs.dll&quot; (&#xD;&#xA;  cd &quot;%25DIR%25&quot;&#xD;&#xA;  ping 127.0.0.1 -n 2 &gt; nul&#xD;&#xA;  start &quot;&quot; /b &quot;%25EXE%25&quot;&#xD;&#xA;  exit /b 0&#xD;&#xA;) else (&#xD;&#xA;  goto loop&#xD;&#xA;)" />
  </Target>




</Project>
